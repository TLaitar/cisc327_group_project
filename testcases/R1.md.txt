# R1 `/login` test cases by Melissa Zhu
### Test_Data:
	```
	test_user = User(
		email=’test_frontend@test.com’,
     		name=‘test_frontend’,
     		password=generate_password+hash(‘test_frontend’)
	)
	```

### Test case R1.1 - If the user hasn’t logged in, show the login page
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- validate that the current page contains #log-in-header element

### Test case R1.2 - The login page has a message that by default says “please login”
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- validate that the current page contains #log-in-header element that says “please login”

### Test case R1.3 - If the user has logged in, redirect to the user profile page
	Mocking:
	- Mock backend.get_user to return a test_user instance

	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page contains #welcome-header element

### Test case R1.4 - The login page provides a login form which requests two fields: email and password
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	-validate that elements #email and #password exist on current page
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page contains #welcome-header element

### Test case R1.5 - The login form can be submitted as a POST request to the current URL (/login)
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- submit POST request to /login URL
	- validate that current page contains #welcome-header element

### Test case R1.6.1 - Email and password both cannot be empty (check empty)
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- validate elements #email and #password both contain characters
	- click element input[type=“submit”]
	- open /login again
	- validate that current page contains #welcome-header element

### Test case R1.6.2 - Email and password both cannot be empty (check fail)
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page is /login again with error message

### Test case R1.7 - Email has to follow addr-spec defined in RFC 5322
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- validate that #email element follows requirements
	- click element input[type=“submit”]
	- open /login again
	- validate that current page contains #welcome-header element

### Test case R1.8 - Password has to meet the required complexity: minimum length 6, at least one upper case, at least one lower case, and at least one special character
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- validate #password element follows requirements
	- click element input[type=“submit”]
	- open /login again
	- validate correct error message exists to prompt user to try again

### Test case R1.9 - For any formatting errors, render the login page and show the message “email/password format is incorrect.”
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page is /login again and shows error message “email/password format is incorrect.”

### Test case R1.10 - If email/password are correct, redirect to /
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page redirected to /

### Test case R1.11 - If email/password is not correct, redirect to /login and show message “email/password combination incorrect”
	Mocking:
	- Mock backend.get_user to return a test_user instance
	Actions:
	- open /logout (to invalidate any logged-in sessions that may exist)
	- open /login
	- enter test_user’s email into element #email
	- enter test_user’s password into element #password
	- click element input[type=“submit”]
	- open /login again
	- validate that current page is /login
	- validate message “email/password combination incorrect” appears
